<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ANSI_FindTables" xml:space="preserve">
    <value>select
	TABLE_SCHEMA,
	TABLE_NAME
from
	INFORMATION_SCHEMA.TABLES
where
	TABLE_TYPE = 'BASE TABLE'
order by
	TABLE_SCHEMA,
	TABLE_NAME</value>
  </data>
  <data name="ANSI_FindViews" xml:space="preserve">
    <value>select
	TABLE_SCHEMA,
	TABLE_NAME
from
	INFORMATION_SCHEMA.VIEWS
order by
	TABLE_SCHEMA,
	TABLE_NAME</value>
  </data>
  <data name="DefaultConnectionString" xml:space="preserve">
    <value>Data Source=%TEMP%\Test.db3</value>
  </data>
  <data name="SQLite_FindColumns" xml:space="preserve">
    <value>PRAGMA table_info(@TableName)</value>
  </data>
  <data name="SQLite_FindTables" xml:space="preserve">
    <value>SELECT name FROM sqlite_master
WHERE type='table'
ORDER BY name;</value>
  </data>
  <data name="SQLite_FindViews" xml:space="preserve">
    <value>SELECT name FROM sqlite_master
WHERE type='view'
ORDER BY name;</value>
  </data>
  <data name="ANSI_FindColumns" xml:space="preserve">
    <value>select
	c.COLUMN_NAME as name,
	c.DATA_TYPE 
		+ ISNULL('(' + cast(c.character_maximum_length as varchar) + ')', '')
		+ case 
			when c.DATA_TYPE in ('decimal', 'numeric') then
				ISNULL('(' + cast(c.NUMERIC_PRECISION as varchar) + ', ' + CAST(c.NUMERIC_SCALE as varchar) + ')', '')
			else ''
		end
	as type,
	c.IS_NULLABLE,
	sum(case when tc.CONSTRAINT_TYPE = 'PRIMARY KEY' and kcu.COLUMN_NAME is not null then 1 else 0 end) as PKCount,
	sum(case when tc.CONSTRAINT_TYPE = 'FOREIGN KEY' and kcu.COLUMN_NAME is not null then 1 else 0 end) as FKCount
from
	INFORMATION_SCHEMA.COLUMNS c
	left join INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc on
		tc.TABLE_SCHEMA = c.TABLE_SCHEMA
		and tc.TABLE_NAME = c.TABLE_NAME
	left join INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu on
		tc.TABLE_SCHEMA = kcu.TABLE_SCHEMA
		and tc.TABLE_NAME = kcu.TABLE_NAME
		and tc.CONSTRAINT_NAME = kcu.CONSTRAINT_NAME
		and c.COLUMN_NAME = kcu.COLUMN_NAME
where
	c.TABLE_SCHEMA = @SchemaName
	and c.TABLE_NAME = @TableName
group by
	c.COLUMN_NAME,
	c.DATA_TYPE,
	c.CHARACTER_MAXIMUM_LENGTH,
	c.NUMERIC_PRECISION,
	c.NUMERIC_SCALE,
	c.IS_NULLABLE</value>
  </data>
  <data name="SQLServer_FindDatabases" xml:space="preserve">
    <value>select
	name
from
	sys.databases
order by
	1</value>
  </data>
  <data name="SQLServer_SetDatabase" xml:space="preserve">
    <value>if exists (select 1 from sys.databases d where d.name = @DatabaseName)
begin

use @DatabaseReplaceName

end</value>
  </data>
  <data name="DB2_FindColumns" xml:space="preserve">
    <value>select
	LTRIM(RTRIM(c.COLNAME)) as COLNAME,
	NULLS,
	case
		when TYPENAME = 'DECIMAL' then CONCAT(LTRIM(RTRIM(TYPENAME)), CONCAT(' (',CONCAT(LENGTH, CONCAT(', ', CONCAT(SCALE, ')')))))
		when TYPENAME like '%CHAR%' then CONCAT(LTRIM(RTRIM(TYPENAME)), CONCAT(' (',CONCAT(LENGTH, ')')))
		else LTRIM(RTRIM(TYPENAME))
	end as COLTYPE,
	case when KEYSEQ is not null then 1 else 0 end as IsPrimaryKey,
	count(k.COLNAME) as FKCount
from 
	syscat.columns c
	left join syscat.tabconst tc on
		c.TABSCHEMA = tc.TABSCHEMA
		and c.TABNAME = tc.TABNAME
		and tc.TYPE = 'F'
	left join syscat.keycoluse k on
		tc.CONSTNAME = k.CONSTNAME
		and tc.TABSCHEMA = k.TABSCHEMA
		and tc.TABNAME = k.TABNAME
		and c.COLNAME = k.COLNAME
where
	c.tabschema = @SchemaName
	and c.tabname = @TableName
group by
	c.COLNO,
	c.KEYSEQ,
	c.COLNAME,
	c.TYPENAME,
	c.LENGTH,
	c.SCALE,
	c.NULLS
order by
	COLNO</value>
  </data>
  <data name="DB2_FindTables" xml:space="preserve">
    <value>select
	LTRIM(RTRIM(TABSCHEMA)) as SCHEMA, 
	LTRIM(RTRIM(TABNAME)) as NAME
from 
	syscat.tables
where
	type = 'T'
	and ownertype = 'U'
	and card &gt;= 0
order by tabschema, tabname</value>
  </data>
  <data name="DB2_FindViews" xml:space="preserve">
    <value>select
	LTRIM(RTRIM(VIEWSCHEMA)) as SCHEMA, 
	LTRIM(RTRIM(VIEWNAME)) as NAME
from 
	syscat.views
where
	ownertype = 'U'
	and viewschema not like 'SYS%'
order by
	viewschema,
	viewname</value>
  </data>
  <data name="Teradata_FindColumns" xml:space="preserve">
    <value>help column @DatabaseName.@TableName.*</value>
  </data>
  <data name="Teradata_FindDatabases" xml:space="preserve">
    <value>select
	DatabaseName
from
	DBC.DatabasesX
order by 1</value>
  </data>
  <data name="Teradata_FindTables" xml:space="preserve">
    <value>select
	TableName
from
	DBC.TablesX
where
	DatabaseName = ?
	and TableKind = 'T'
order by
	TableName</value>
  </data>
  <data name="Teradata_FindViews" xml:space="preserve">
    <value>select
	TableName
from
	DBC.TablesX
where
	DatabaseName = ?
	and TableKind = 'V'
order by
	TableName</value>
  </data>
  <data name="ODBC_SetDatabase" xml:space="preserve">
    <value>if exists (select 1 from sys.databases d where d.name = ?)
begin

use @DatabaseReplaceName

end</value>
  </data>
  <data name="SQLite_FindForeignKeys" xml:space="preserve">
    <value>pragma foreign_key_list(@TableName)</value>
  </data>
  <data name="Teradata_FindForeignKeys" xml:space="preserve">
    <value>select
	ChildKeyColumn
from
	dbc.all_ri_children
where
	ChildDB = @DatabaseName
	and ChildTable = @TableName</value>
  </data>
  <data name="ANSI_FindKeys" xml:space="preserve">
    <value>select
	tc.CONSTRAINT_NAME,
	case 
		when CONSTRAINT_TYPE = 'PRIMARY KEY' then 1
		when CONSTRAINT_TYPE = 'FOREIGN KEY' then 2
		else 0
	end as KeyType
from
	INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc
where
	tc.TABLE_SCHEMA = @SchemaName
	and tc.TABLE_NAME = @TableName
	and tc.CONSTRAINT_TYPE in ('PRIMARY KEY', 'FOREIGN KEY')
order by
	KeyType,
	CONSTRAINT_NAME</value>
  </data>
  <data name="DB2_FindKeys" xml:space="preserve">
    <value>select
	CONSTNAME,
	case
		when TYPE = 'P' then 1
		when TYPE = 'F' then 2
		else 0
	end as KeyType
from
	syscat.tabconst tc
where
	tc.type in ('P', 'F')
	and tc.TABSCHEMA = @SchemaName
	and tc.TABNAME = @TableName
order by
	KeyType,
	CONSTNAME</value>
  </data>
  <data name="Teradata_SetDatabase" xml:space="preserve">
    <value>set session database @DatabaseName</value>
  </data>
</root>